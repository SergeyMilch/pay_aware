name: Deploy to Server and Build APK

on:
  push:
    branches:
      - main

jobs:
  # Using a flag to control the execution of a job
  set-deployment-flag-back:
    runs-on: ubuntu-latest
    outputs:
      deploy_backend: ${{ steps.set-flag-back.outputs.deploy_backend }}
    steps:
      - name: Set Deployment Flag Back
        id: set-flag-back
        run: |
          if [[ "${{ secrets.DEPLOY_BACKEND }}" == "true" ]]; then
            echo "deploy_backend=true" >> $GITHUB_ENV
            echo "::set-output name=deploy_backend::true"
          else
            echo "deploy_backend=false" >> $GITHUB_ENV
            echo "::set-output name=deploy_backend::false"
          fi

  set-deployment-flag-front:
    runs-on: ubuntu-latest
    outputs:
      deploy_frontend: ${{ steps.set-flag-front.outputs.deploy_frontend }}
    steps:
      - name: Set Deployment Flag Front
        id: set-flag-front
        run: |
          if [[ "${{ secrets.DEPLOY_FRONTEND }}" == "true" ]]; then
            echo "deploy_frontend=true" >> $GITHUB_ENV
            echo "::set-output name=deploy_frontend::true"
          else
            echo "deploy_frontend=false" >> $GITHUB_ENV
            echo "::set-output name=deploy_frontend::false"
          fi

  # Job for deploy backend
  deploy-backend:
    needs: set-deployment-flag-back
    runs-on: ubuntu-latest
    if: needs.set-deployment-flag-back.outputs.deploy_backend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/pay_aware_app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/pay_aware_app:latest

      - name: Set up SSH for server access
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo -e "Host spaceweb\n  HostName ${{ secrets.SERVER_IP }}\n  User ${{ secrets.SSH_USER }}\n  IdentityFile ~/.ssh/id_ed25519\n  IdentitiesOnly yes" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          ssh-keyscan -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts

      # Step for debugging
      - name: Test SSH connection
        run: |
          ssh -v -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}" "echo Connected successfully"

      - name: Copy Logstash Configuration to server
        run: |
          rsync -avz -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" logstash.conf "${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/var/www/pay_aware"

      - name: Copy Docker Compose to server
        run: |
          echo "Connecting to: ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}"
          rsync -avz -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" docker-compose.yml "${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/var/www/pay_aware"

      - name: Set up backend environment variables
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}" << 'EOF'
          cat > /var/www/pay_aware/.env << EOL
          ENV=${{ secrets.BACKEND_ENV }}
          ADDR_SERVER=${{ secrets.BACKEND_ADDR_SERVER }}
          DB_HOST=${{ secrets.BACKEND_DB_HOST }}
          DB_PORT=${{ secrets.BACKEND_DB_PORT }}
          DB_USER=${{ secrets.BACKEND_DB_USER }}
          DB_PASSWORD=${{ secrets.BACKEND_DB_PASSWORD }}
          DB_NAME=${{ secrets.BACKEND_DB_NAME }}
          DB_SSL_MODE=${{ secrets.BACKEND_DB_SSL_MODE }}
          JWT_SECRET=${{ secrets.BACKEND_JWT_SECRET }}
          REDIS_ADDR=${{ secrets.BACKEND_REDIS_ADDR }}
          REDIS_PASSWORD=${{ secrets.BACKEND_REDIS_PASSWORD }}
          REDIS_DB=${{ secrets.BACKEND_REDIS_DB }}
          REDIS_TLS_ENABLED=${{ secrets.BACKEND_REDIS_TLS_ENABLED }}
          ZOO_SERVER_USERS=${{ secrets.BACKEND_ZOO_SERVER_USERS }}
          ZOO_SERVER_PASSWORDS=${{ secrets.BACKEND_ZOO_SERVER_PASSWORDS }}
          ZOO_KEYSTORE_PASSWORD=${{ secrets.BACKEND_ZOO_KEYSTORE_PASSWORD }}
          ZOO_TRUSTSTORE_PASSWORD=${{ secrets.BACKEND_ZOO_TRUSTSTORE_PASSWORD }}
          KAFKA_ZOOKEEPER_USER=${{ secrets.BACKEND_KAFKA_ZOOKEEPER_USER }}
          KAFKA_ZOOKEEPER_PASSWORD=${{ secrets.BACKEND_KAFKA_ZOOKEEPER_PASSWORD }}
          KAFKA_BROKER=${{ secrets.BACKEND_KAFKA_BROKER }}
          KAFKA_TOPIC=${{ secrets.BACKEND_KAFKA_TOPIC }}
          KAFKA_LISTENERS=${{ secrets.BACKEND_KAFKA_LISTENERS }}
          KAFKA_ADVERTISED_LISTENERS=${{ secrets.BACKEND_KAFKA_ADVERTISED_LISTENERS }}
          KAFKA_USE_SSL=${{ secrets.BACKEND_KAFKA_USE_SSL }}
          KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD=${{ secrets.BACKEND_KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD }}
          LOGSTASH_ADDR=${{ secrets.BACKEND_LOGSTASH_ADDR }}
          ELASTIC_USER=${{ secrets.BACKEND_ELASTIC_USER }}
          ELASTIC_PASSWORD=${{ secrets.BACKEND_ELASTIC_PASSWORD }}
          EXPO_URL_SEND=${{ secrets.BACKEND_EXPO_URL_SEND }}
          SSL_CERT_PATH=${{ secrets.BACKEND_SSL_CERT_PATH }}
          SSL_KEY_PATH=${{ secrets.BACKEND_SSL_KEY_PATH }}
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          EOL
          EOF

      - name: Deploy with Docker Compose
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}" "cd /var/www/pay_aware && docker-compose pull && docker-compose down && docker-compose up -d && sleep 10 && docker-compose restart nginx"

  # Job to build APK for frontend
  build-apk:
    needs: set-deployment-flag-front
    runs-on: ubuntu-latest
    if: needs.set-deployment-flag-front.outputs.deploy_frontend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Install dependencies
        working-directory: ./subscription-manager
        run: |
          npm install --legacy-peer-deps
          npm install -g eas-cli

      - name: Set up frontend environment variables
        run: |
          echo "ENVIRONMENT=${{ secrets.FRONTEND_ENVIRONMENT }}" > ./subscription-manager/.env
          echo "API_URL=${{ secrets.FRONTEND_API_URL }}" >> ./subscription-manager/.env

      - name: Build APK with EAS
        working-directory: ./subscription-manager
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          eas build -p android --profile production --non-interactive

      - name: Debug APK URL Response
        working-directory: ./subscription-manager
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          eas build:list --status=finished --limit=1 --json

      - name: Get APK URL and Download APK
        working-directory: ./subscription-manager
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          APK_URL=$(eas build:list --status=finished --limit=1 --json | jq -r '.[] | select(.artifacts != null) | .artifacts.buildUrl')
          if [ -z "$APK_URL" ]; then
            echo "Error: Unable to find APK URL."
            exit 1
          fi
          curl -o app-release.apk "$APK_URL"

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: ./subscription-manager/app-release.apk
