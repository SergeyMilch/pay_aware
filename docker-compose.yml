services:
  postgres:
    image: postgres:17-alpine
    container_name: pay_aware_postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pay_aware_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10m
      timeout: 5s
      retries: 5
    mem_limit: 512m
    mem_reservation: 256m

  redis:
    image: redis:7-alpine
    container_name: pay_aware_redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"] # Добавлена команда для установки пароля
    networks:
      - pay_aware_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5m
      timeout: 5s
      retries: 5
    mem_limit: 256m
    mem_reservation: 128m

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: pay_aware_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 4000
      ZOOKEEPER_SESSION_TIMEOUT: 60000
      ZOO_SERVER_USERS: ${ZOO_SERVER_USERS}
      ZOO_SERVER_PASSWORDS: ${ZOO_SERVER_PASSWORDS}
      ZOO_ENABLE_AUTH: "no"
      ALLOW_ANONYMOUS_LOGIN: "yes"
      JVMFLAGS: "-Xmx1024m -Xms512m"
    networks:
      - pay_aware_network
    healthcheck:
      test:
        [
          "CMD",
          "echo",
          "ruok",
          "|",
          "nc",
          "localhost",
          "2181",
          "|",
          "grep",
          "imok",
        ]
      interval: 10m
      timeout: 5s
      retries: 5
    mem_limit: 2g
    mem_reservation: 1g

  kafka:
    image: bitnami/kafka:latest
    container_name: pay_aware_kafka
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: pay_aware_zookeeper:2181
      KAFKA_ZOOKEEPER_USER: ${KAFKA_ZOOKEEPER_USER}
      KAFKA_ZOOKEEPER_PASSWORD: ${KAFKA_ZOOKEEPER_PASSWORD}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JVM_PERFORMANCE_OPTS: "-Xms512M -Xmx512M"
    depends_on:
      - zookeeper
    networks:
      - pay_aware_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1",
        ]
      interval: 5m
      timeout: 5s
      retries: 5
    mem_limit: 3g
    mem_reservation: 2g

  elasticsearch:
    image: bitnami/elasticsearch:8.2.0
    container_name: pay_aware_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true # Включение аутентификации
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - ES_JAVA_OPTS=-Xms256m -Xmx256m # Ограничение использования памяти
    volumes:
      - es_data:/bitnami/elasticsearch/data
    networks:
      - pay_aware_network
    mem_limit: 1g
    mem_reservation: 512m

  kibana:
    image: bitnami/kibana:8.2.0
    container_name: pay_aware_kibana
    environment:
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_CERTIFICATE=/certs/fullchain.pem
      - SERVER_SSL_KEY=/certs/privkey.pem
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - SERVER_BASEPATH=/kibana
      - SERVER_REWRITEBASEPATH=true
      - SERVER_PUBLICBASEURL=https://pay-aware.ru:444/kibana
      - XPACK_SPACES_ENABLED=false
    volumes:
      - ${SSL_CERT_PATH}:/certs/fullchain.pem:ro # Путь к SSL сертификатам
      - ${SSL_KEY_PATH}:/certs/privkey.pem:ro # Путь к SSL ключу
    depends_on:
      - elasticsearch
    networks:
      - pay_aware_network
    mem_limit: 512m
    mem_reservation: 256m

  logstash:
    image: bitnami/logstash:8.2.0
    container_name: pay_aware_logstash
    user: "1000:1000"
    command: logstash --path.settings /opt/bitnami/logstash/config
    env_file:
      - /var/www/pay_aware/.env
    environment:
      - LOGSTASH_KEYSTORE_PASS=${LOGSTASH_KEYSTORE_PASS} # Пароль для keystore
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    volumes:
      - /var/www/pay_aware/data/logstash.yml:/opt/bitnami/logstash/config/logstash.yml:ro
      - /var/www/pay_aware/data/logstash.keystore:/opt/bitnami/logstash/config/logstash.keystore:ro
      - /var/www/pay_aware/logstash.conf:/bitnami/logstash/pipeline/logstash.conf:ro
      - /var/www/pay_aware/data/pipelines.yml:/opt/bitnami/logstash/config/pipelines.yml:ro
      - logstash_data:/opt/bitnami/logstash/data
    depends_on:
      - elasticsearch
    networks:
      - pay_aware_network
    mem_limit: 1g
    mem_reservation: 512m

  app:
    image: ${DOCKER_USERNAME}/pay_aware_app:latest
    container_name: pay_aware_app
    restart: always
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSL_MODE: ${DB_SSL_MODE}
      REDIS_ADDR: ${REDIS_ADDR}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      JWT_SECRET: ${JWT_SECRET}
      LOGSTASH_ADDR: ${LOGSTASH_ADDR}
      INTERNAL_ACCESS_TOKEN: ${INTERNAL_ACCESS_TOKEN}
      ENV: ${ENV}
    depends_on:
      - postgres
      - redis
      - kafka
      - logstash
    ports:
      - "8000:8000"
    networks:
      - pay_aware_network
    volumes:
      - /var/www/pay_aware/.env:/app/.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --header='X-Internal-Access-Token: ${INTERNAL_ACCESS_TOKEN}' -qO- http://127.0.0.1:8000/health || exit 1",
        ]
      interval: 10m
      timeout: 5s
      retries: 5
    mem_limit: 512m
    mem_reservation: 256m

  # frontend:
  #   build:
  #     context: ./subscription-manager
  #     dockerfile: Dockerfile
  #   container_name: pay_aware_frontend
  #   ports:
  #     - "19000:19000" # Порт для сервера разработки Expo
  #     - "19001:19001" # Порт для отладки
  #     - "19002:19002" # Порты для работы с устройствами
  #     - "19006:19006"
  #   environment:
  #     REACT_NATIVE_PACKAGER_HOSTNAME: "0.0.0.0"
  #     # CI: "true" # Устанавливаем переменную CI=true, чтобы избежать интерактивного режим
  #   depends_on:
  #     - app
  #   networks:
  #     - pay_aware_network

  nginx:
    image: nginx:latest
    container_name: pay_aware_nginx
    ports:
      - "444:444" # HTTPS
      - "8081:80" # HTTP для редиректа на HTTPS
    volumes:
      - ${SSL_CERT_PATH}:/certs/fullchain.pem:ro # Путь к SSL сертификатам
      - ${SSL_KEY_PATH}:/certs/privkey.pem:ro # Путь к SSL ключу
      - /etc/nginx/.htpasswd:/etc/nginx/.htpasswd:ro
      - /var/www/pay_aware/config/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
    networks:
      - pay_aware_network
    mem_limit: 512m
    mem_reservation: 256m

networks:
  pay_aware_network:
    name: pay_aware_network
    driver: bridge

volumes:
  postgres_data:
  es_data:
  logstash_data:
# Если используем ssl
# services:
#   postgres:
#     image: postgres:17-alpine
#     container_name: pay_aware_postgres
#     environment:
#       POSTGRES_USER: ${DB_USER}
#       POSTGRES_PASSWORD: ${DB_PASSWORD}
#       POSTGRES_DB: ${DB_NAME}
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#       - ${SSL_CERT_PATH}:/certs/cert.pem:ro
#       - ${SSL_KEY_PATH}:/certs/key.pem:ro
#     networks:
#       - pay_aware_network
#     command:
#       [
#         "postgres",
#         "-c",
#         "ssl=on",
#         "-c",
#         "ssl_cert_file=/certs/cert.pem",
#         "-c",
#         "ssl_key_file=/certs/key.pem",
#       ]
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     mem_limit: 512m
#     mem_reservation: 256m

#   redis:
#     image: redis:7-alpine
#     container_name: pay_aware_redis
#     environment:
#       REDIS_PASSWORD: ${REDIS_PASSWORD}
#     command:
#       [
#         "redis-server",
#         "--requirepass",
#         "${REDIS_PASSWORD}",
#         "--tls-cert-file",
#         "/certs/cert.pem",
#         "--tls-key-file",
#         "/certs/key.pem",
#         "--tls-ca-cert-file",
#         "/certs/cert.pem",
#         "--port",
#         "6379",
#         "--tls-port",
#         "6380",
#         "--tls-auth-clients",
#         "no",
#       ]
#     volumes:
#       - ${SSL_CERT_PATH}:/certs/cert.pem:ro
#       - ${SSL_KEY_PATH}:/certs/key.pem:ro
#     networks:
#       - pay_aware_network
#     healthcheck:
#       test:
#         [
#           "CMD",
#           "redis-cli",
#           "-u",
#           "rediss://localhost:6380",
#           "--tls",
#           "--insecure",
#           "ping",
#         ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     mem_limit: 256m
#     mem_reservation: 128m

#   zookeeper:
#     image: bitnami/zookeeper:latest
#     container_name: pay_aware_zookeeper
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 4000
#       ZOOKEEPER_SESSION_TIMEOUT: 60000
#       ZOO_SERVER_USERS: ${ZOO_SERVER_USERS}
#       ZOO_SERVER_PASSWORDS: ${ZOO_SERVER_PASSWORDS}
#       ZOO_ENABLE_AUTH: "yes" # Включаем аутентификацию
#       ALLOW_ANONYMOUS_LOGIN: "no" # Запрещаем анонимный доступ
#       JVMFLAGS: "-Xmx1024m -Xms512m"
#       ZOOKEEPER_SSL_CLIENT_ENABLE: "true" # Включаем SSL для клиентов
#       ZOOKEEPER_SSL_PORT: "2281" # Новый порт для SSL-подключений клиентов
#       ZOOKEEPER_TLS_KEYSTORE_PATH: "/certs/keystore.p12" # Путь к keystore, созданному с помощью pkcs12
#       ZOOKEEPER_TLS_KEYSTORE_PASSWORD: "${ZOO_KEYSTORE_PASSWORD}" # Пароль для keystore
#       ZOOKEEPER_TLS_TRUSTSTORE_PATH: "/certs/truststore.jks" # Путь к truststore
#       ZOOKEEPER_TLS_TRUSTSTORE_PASSWORD: "${ZOO_TRUSTSTORE_PASSWORD}" # Пароль для truststore
#     volumes:
#       - ${SSL_CERT_PATH}:/certs # Примонтируем директорию с сертификатами
#     networks:
#       - pay_aware_network
#     healthcheck:
#       test:
#         [
#           "CMD",
#           "echo",
#           "ruok",
#           "|",
#           "openssl",
#           "s_client",
#           "-connect",
#           "localhost:2281",
#           "-quiet",
#           "|",
#           "grep",
#           "imok",
#         ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     mem_limit: 2g
#     mem_reservation: 1g

#   kafka:
#   image: bitnami/kafka:latest
#   container_name: pay_aware_kafka
#   restart: always
#   environment:
#     KAFKA_BROKER_ID: 1
#     KAFKA_ZOOKEEPER_CONNECT: pay_aware_zookeeper:2281 # Подключение по SSL порту
#     KAFKA_ZOOKEEPER_USER: ${KAFKA_ZOOKEEPER_USER}
#     KAFKA_ZOOKEEPER_PASSWORD: ${KAFKA_ZOOKEEPER_PASSWORD}
#     KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
#     KAFKA_LISTENERS: ${KAFKA_LISTENERS}
#     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#     KAFKA_JVM_PERFORMANCE_OPTS: "-Xms512M -Xmx512M"
#     KAFKA_USE_SSL: ${KAFKA_USE_SSL} # Переменная окружения для включения SSL
#     KAFKA_CFG_SECURITY_PROTOCOL: SSL # Использование SSL для подключения
#     KAFKA_CFG_SSL_TRUSTSTORE_LOCATION: "/certs/truststore.jks"
#     KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD: "${ZOO_TRUSTSTORE_PASSWORD}"
#   volumes:
#     - ${SSL_CERT_PATH}:/certs:ro # Монтируем всю директорию с сертификатами
#   depends_on:
#     - zookeeper
#   networks:
#     - pay_aware_network
#   healthcheck:
#     test: ["CMD", "nc", "-z", "localhost", "9092"]
#     interval: 10s
#     timeout: 5s
#     retries: 5
#   mem_limit: 3g
#   mem_reservation: 2g

#   elasticsearch:
#     image: bitnami/elasticsearch:8.2.0
#     container_name: pay_aware_elasticsearch
#     environment:
#       - discovery.type=single-node
#       - ES_JAVA_OPTS=-Xms256m -Xmx256m
#       - xpack.security.enabled=true # Включение аутентификации
#       - xpack.security.transport.ssl.enabled=true # Включение SSL
#       - xpack.security.http.ssl.enabled=true # Включение HTTPS
#       - xpack.security.http.ssl.keystore.path=/certs/keystore.p12
#       - xpack.security.http.ssl.truststore.path=/certs/truststore.jks
#       - ELASTIC_PASSWORD=${ELASTIC_PASSWORD} # Пароль для elastic
#     volumes:
#       - es_data:/bitnami/elasticsearch/data
#       - ${SSL_CERT_PATH}:/certs:ro # Монтирование сертификатов
#     networks:
#       - pay_aware_network
#     mem_limit: 1g
#     mem_reservation: 512m

#   kibana:
#     image: bitnami/kibana:8.2.0
#     container_name: pay_aware_kibana
#     environment:
#       - SERVER_SSL_ENABLED=true # Включение HTTPS
#       - SERVER_SSL_CERTIFICATE=/certs/cert.pem
#       - SERVER_SSL_KEY=/certs/key.pem
#       - ELASTICSEARCH_HOSTS=https://pay_aware_elasticsearch:9200
#       - ELASTICSEARCH_USER=${ELASTIC_USER}
#       - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
#     volumes:
#       - ${SSL_CERT_PATH}:/certs:ro # Монтирование сертификатов
#     depends_on:
#       - elasticsearch
#     networks:
#       - pay_aware_network
#     ports:
#       - "5601:5601"
#     mem_limit: 512m
#     mem_reservation: 256m

#   logstash:
#     image: bitnami/logstash:8.2.0
#     container_name: pay_aware_logstash
#     volumes:
#       - /var/www/pay_aware/logstash.conf:/bitnami/logstash/pipeline/logstash.conf:ro
#       - ${SSL_CERT_PATH}:/certs:ro # Монтирование сертификатов
#     environment:
#       - xpack.security.enabled=true
#       - LOGSTASH_JAVA_OPTS=-Xms256m -Xmx256m
#       - LOGSTASH_ELASTICSEARCH_URL=https://pay_aware_elasticsearch:9200
#       - ELASTICSEARCH_USER=${ELASTIC_USER}
#       - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
#     depends_on:
#       - elasticsearch
#     networks:
#       - pay_aware_network
#     mem_limit: 1g
#     mem_reservation: 512m

#   app:
#     image: ${DOCKER_USERNAME}/pay_aware_app:latest
#     container_name: pay_aware_app
#     restart: always
#     environment:
#       DB_HOST: ${DB_HOST}
#       DB_PORT: ${DB_PORT}
#       DB_USER: ${DB_USER}
#       DB_PASSWORD: ${DB_PASSWORD}
#       DB_NAME: ${DB_NAME}
#       DB_SSL_MODE: ${DB_SSL_MODE}
#       REDIS_ADDR: ${REDIS_ADDR}
#       REDIS_PASSWORD: ${REDIS_PASSWORD}
#       REDIS_TLS_ENABLED: ${REDIS_TLS_ENABLED}
#       KAFKA_BROKER: ${KAFKA_BROKER}
#       KAFKA_TOPIC: ${KAFKA_TOPIC}
#       KAFKA_USE_SSL: ${KAFKA_USE_SSL}
#       KAFKA_CFG_SSL_TRUSTSTORE_LOCATION: "/certs/truststore.jks"
#       KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD}
#       JWT_SECRET: ${JWT_SECRET}
#       LOGSTASH_ADDR: ${LOGSTASH_ADDR}
#       LOGSTASH_SSL_ENABLED: "true"
#       SSL_CERT_PATH: ${SSL_CERT_PATH}
#       SSL_KEY_PATH: ${SSL_KEY_PATH}
#     volumes:
#       - /var/www/pay_aware/.env:/app/.env
#       - ${SSL_CERT_PATH}:/certs/cert.pem:ro
#       - ${SSL_KEY_PATH}:/certs/key.pem:ro
#     depends_on:
#       - postgres
#       - redis
#       - kafka
#       - logstash
#     ports:
#       - "8000:8000"
#     networks:
#       - pay_aware_network
#     healthcheck:
#       test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     mem_limit: 512m
#     mem_reservation: 256m

#   nginx:
#     image: nginx:latest
#     container_name: pay_aware_nginx
#     ports:
#       - "444:444" # HTTPS
#       - "8081:80" # HTTP для редиректа на HTTPS
#     volumes:
#       - ${SSL_CERT_PATH}:/certs/cert.pem:ro # Путь к SSL сертификатам
#       - ${SSL_KEY_PATH}:/certs/key.pem:ro # Путь к SSL ключу
#       - /var/www/pay_aware/config/nginx.conf:/etc/nginx/conf.d/default.conf:ro
#     depends_on:
#       - app
#     networks:
#       - pay_aware_network
#     mem_limit: 256m
#     mem_reservation: 128m

# networks:
#   pay_aware_network:
#     name: pay_aware_network
#     driver: bridge

# volumes:
#   postgres_data:
#   es_data:
